# Nicer default prompt-string, with result-of-last-command display

TCOLOR='{{ machine_name_terminal_color }}'
TCOK='1;38;5;062m'
TCERR='1;38;5;197m'

if [ "$PS1" ]; then

    function pad(){
        str=$1
        while ((${#str} < 3)); do
            str="0$str"
        done
        echo "$str"
    }

    function errid_prompt(){
        errid=$?
        if [ $errid -eq 0 ]; then
            echo -e "\033[0;$TCOK( OK )\033[0m "
        else
            echo -e "\033[0;$TCERR(X$(pad $errid))\033[0m "
        fi
    }

    # You might be telling yourself, "but Maya, you have to escape *all* of the
    # non- printing characters - what is that \033[0000m even DOING there?"
    #
    # Well, I would direct your attention to the fact to errid_prompt()'s output
    # is escaped, even though it outputs some printing characters. The issue is
    # that bash won't see the escape characters properly when they're echo'ed by
    # that function - so, I have two choices:
    #   * Don't escape the output, in which case bash would treat the
    #     non-printing characters as printing, thus wrapping too early; or
    #   * Escape the entire output, in which case bash would treat the printing
    #     characters as non-printing, thus wrapping too late.
    #
    # Luckily, since we know exactly how many printing characters errid_prompt
    # is going to return, we can take the second option, insert some extra
    # non-printing characters into the prompt-string, and lie to bash by telling
    # it that they're printing.
    #
    # It's a horrible kludge, but horrible kludges are a treasured part of the
    # linux tradition.
    PS1='\[\033[0m\]\[$(errid_prompt)\]\033[0000m[\u@\[\033[0;$TCOLOR\]\h\[\033[0m\]]:\w'

    if [ "`id -u`" -eq 0 ]; then
        PS1="${PS1}\[\033[0;$TCERR\]#\[\033[0m\] "
    else
        PS1="${PS1}$ "
    fi
fi